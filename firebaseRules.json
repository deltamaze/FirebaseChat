{
  "rules": {
    ".read": true,
    ".write": false,
      //last_message rule Source: http://stackoverflow.com/questions/24830079/firebase-rate-limiting-in-security-rules
      "last_message": {
          // timestamp can't be deleted or I could just recreate it to bypass our throttle 
          ".write": "newData.exists()",
          // the new value must be at least 2000 milliseconds after the last (no more than one message every two seconds)
          // the new value must be before now (it will be since `now` is when it reaches the server unless I try to cheat)
          ".validate": "newData.isNumber() && newData.val() === now && (!data.exists() || newData.val() > data.val()+2000)"
      },
      
      "messages": {
        "$key" : {
          // a new message can be created if it does not exist, but it
          // cannot be modified or deleted
          ".write": " newData.exists()",
          // the room attribute must be a valid key in room_names/ (the room must exist)
          // the object to write must have a name, message, and timestamp
          ".validate": "newData.hasChildren(['username', 'text', 'ts'])",

          // the name must be a string, longer than 0 chars, and less than 20 and cannot contain "admin"
          "username": { ".validate": "newData.isString() && newData.val().length > 0 && newData.val().length < 20 && !newData.val().contains('admin')" },

          // the message must be longer than 0 chars and less than 50
          "text": { ".validate": "newData.isString() && newData.val().length > 0 && newData.val().length < 50" },

          // messages cannot be added in the past or the future
          // clients should use firebase.database.ServerValue.TIMESTAMP
          // to ensure accurate timestamps
          "ts": {
            //Source: http://stackoverflow.com/questions/24830079/firebase-rate-limiting-in-security-rules
            // in order to write a message, I must first make an entry in timestamp_index
            // additionally, that message must be within 500ms of now, which means I can't
            // just re-use the same one over and over, thus, we've effectively required messages
            // to be 2 seconds apart
            ".validate": "newData.val() >= now - 500 && newData.val() === data.parent().parent().parent().child('last_message/').val()"
                },

          // no other fields can be included in a message
          "$other": { ".validate": false }
        }
      }
  }
}